package com.DeviceTest;

import static android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN;
import static android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;

import java.io.File;
import java.math.BigInteger;

import com.DeviceTest.helper.ControlButtonUtil;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.widget.TextView;
import android.content.Intent;
import android.net.Uri;
import android.app.AlertDialog;
import android.content.Context;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.text.InputType;

import android.content.DialogInterface;
import com.DeviceTest.StressTest.NativeInputManager;
import android.os.RemoteException;

import android.telephony.TelephonyManager;
import android.util.Log;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import com.android.internal.telephony.ITelephony;
import android.os.Handler;
import android.os.ServiceManager;

public class CallNumTestActivity extends AppBaseActivity {
	private static final String TAG = "CallNumTestActivity";

	//TextView mResult;
	private TextView mPhoneNum;
	private Button mSetNumBtn;
	private Button mCall;
	private String mCallNumber="112";//"10086";
	private boolean isTalking = false;
	public boolean isRunning = false;
	Handler handler = new Handler();
	TelephonyManager mTelephonyMgr;
	private exPhoneCallListener myPhoneCallListener = new exPhoneCallListener();
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);

		setTitle(getTitle() + "----("
				+ getIntent().getStringExtra(DeviceTest.EXTRA_TEST_PROGRESS) + ")");
		//requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().addFlags(FLAG_FULLSCREEN | FLAG_KEEP_SCREEN_ON);
		
		setContentView(R.layout.callnumtest);

		/*this.mResult = (TextView) findViewById(R.id.text);
		this.mResult.setVisibility(View.VISIBLE);
		this.mResult.setGravity(17);*/

		mPhoneNum = (TextView) findViewById(R.id.phone_num);
		
		mSetNumBtn = (Button) findViewById(R.id.set_num_btn);
		mSetNumBtn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				showSetNumDialog();
			}
		});

		mCall = (Button) findViewById(R.id.call_btn);
		mCall.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				isRunning = true;
						//mCallNumber="10086";
				Intent myIntentDial = new Intent("android.intent.action.CALL_PRIVILEGED",
						Uri.parse("tel:"+mCallNumber));
				myIntentDial.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				startActivity(myIntentDial);
				
			}
		});

		ControlButtonUtil.initControlButtonView(this);

		mTelephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);

		mTelephonyMgr.listen(myPhoneCallListener, PhoneStateListener.LISTEN_CALL_STATE);
	}

	
	protected void onResume() {
		super.onResume();
		startTimer();
		//TelephonyManager mTelephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
//		String imsi = mTelephonyMgr.getSubscriberId();

		/*if (imsi == null) {
			mResult.setText("Cann't get IMSI!");
		} else {
			mResult.setText("IMSI:" + imsi);
		}*/
		updateNumTv();

	}
	
	@Override
	protected void onPause() {
		super.onPause();
		endTimer();
	}
	
		public class exPhoneCallListener extends PhoneStateListener {

		public void onCallStateChanged(int state, String incomingNumber) {
			switch (state) {

			case TelephonyManager.CALL_STATE_IDLE:
				Log.i(TAG, "CALL_STATE_IDLE:isRunning="+isRunning);
				
				if (isRunning) {
					
						isTalking = false;
						isRunning = false;
						//updateBtnState();
					
					NativeInputManager.sendKeyDownUpSync(4);
					Log.d(TAG, "CALL_STATE_IDLE:NativeInputManager.sendKeyDownUpSync(4)");
				}

				break;

			case TelephonyManager.CALL_STATE_OFFHOOK:
				Log.i(TAG, "CALL_STATE_OFFHOOK");
				handler.postDelayed(runnable, 10000);
				isTalking = true;
				break;

			case TelephonyManager.CALL_STATE_RINGING:
				Log.i(TAG, "CALL_STATE_RINGING");
				break;
			default:
				break;
			}
			super.onCallStateChanged(state, incomingNumber);
		}
	}

		Runnable runnable = new Runnable() {
		// @Override
		public void run() {
			// TODO Auto-generated method stub
			boolean handled = false;
			boolean hungUp = false;
			// key repeats are generated by the window manager, and we don't see
			// them
			// here, so unless the driver is doing something it shouldn't be, we
			// know
			// this is the real press event.
			Log.d(TAG, "runnable start.... isTalking=" + isTalking);
			if (isTalking) {
				ITelephony phoneServ = ITelephony.Stub.asInterface(ServiceManager
						.checkService(Context.TELEPHONY_SERVICE));
				if (phoneServ != null) {
					try {
						//success
						//mCurrentCount++;
						//mCallTimesTv.setText(getString(R.string.already_test_time)+ mCurrentCount);
						//mCallTimesTv.setVisibility(View.VISIBLE);
						handled = hungUp = phoneServ.endCall();
						//NativeInputManager.sendKeyDownUpSync(4);
						isRunning=false;
					} catch (RemoteException ex) {
						//failed
						Log.w(TAG, "ITelephony threw RemoteException" + ex);
					}
				} else {
					Log.w(TAG, "!!! Unable to find ITelephony interface !!!");
				}
			} 
		}
	};
		
		public void showSetNumDialog() {
		final EditText editText = new EditText(this);
		editText.setInputType(InputType.TYPE_CLASS_NUMBER);
		new AlertDialog.Builder(this)
				.setTitle(R.string.call_num_tv)
				.setView(editText)
				.setPositiveButton(android.R.string.ok,
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								if (!editText.getText().toString().trim()
										.equals("")) {
									mCallNumber = editText.getText().toString();
									updateNumTv();
								}
							}
						})
				.setNegativeButton(android.R.string.cancel,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.cancel();
							}

						}).show();
	}

	public void updateNumTv() {
		//mPhoneNum.setText(getString(R.string.phone_num)+mCallNumber);
		mPhoneNum.setText(mCallNumber);
	}
		
	public boolean dispatchKeyEvent(KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
			return false;
		}
		return super.dispatchKeyEvent(event);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		mTelephonyMgr.listen(myPhoneCallListener, PhoneStateListener.LISTEN_NONE);
	}
	
	@Override
	public void onOverTime() {
		ControlButtonUtil.mControlButtonView.performFailButtonClick();
	}
	
	@Override
	public int getMaxTime() {
		return 60;
	}
}
